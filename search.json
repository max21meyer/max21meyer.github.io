[
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "Hello.",
    "section": "",
    "text": "Hi. My name is Max. I love code."
  },
  {
    "objectID": "posts/why-tottenham-will-not-win-the-premier-league-this-season/index.html",
    "href": "posts/why-tottenham-will-not-win-the-premier-league-this-season/index.html",
    "title": "Why Tottenham will not win the Premier League this season",
    "section": "",
    "text": "Since the change of name to the Premier League, seven teams have gone on to win the trophy. One of the teams that has come close on multiple occasions but has yet to claim the title is Tottenham Hotspur, also known as Spurs. With prolific players like Harry Kane and Ledley King that have played for the club in the past, it is surprising to see that this club has never won the title.\nWith one of their best starts to a season to date, Spurs think that they are poised to make a run for the title this season. With a new manager, Ange Postecoglou, and a new looking attack, Spurs feel that this is their time.\nHowever, in this era of the Premier League, the top teams are hard to beat. Manchester City is coming off of a treble winning season, Arsenal want revenge after a close second place finish last season, and new-money Newcastle are looking to shock them all with their squad. As a result, Spurs will be winning the title this season.\n\n\nCode\nlibrary(tidyverse)\nlibrary(worldfootballR)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(ggbump)\n\nthisseason &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2023\", matchday=3:13) |&gt; \n  mutate(\n  Season = \"2023-2024\"\n)\n\nweekthirteen &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2023\", matchday=13) |&gt; \n  mutate(\n  Season = \"2023-2024\"\n)\n\nranked &lt;- thisseason |&gt; filter(rk &lt;= 7)\n\ntot &lt;- ranked |&gt;\n  filter(\n    squad == \"Tottenham\"\n  )\n\ntotthirteen &lt;- weekthirteen |&gt;\n  filter(\n    squad == \"Tottenham\"\n  )\n\nggplot() +\n  geom_bump(data=ranked, aes(x=matchday, y=rk, color=squad)) +\n  geom_point(data=ranked, aes(x=matchday, y=rk, color=squad), size=3) +\n  geom_point(data=tot, aes(x=matchday, y=rk, color=squad), size=5) +\n  geom_text(data = ranked |&gt; filter(matchday == min(matchday)), aes(x = matchday -0.3, y=rk, label = squad), size = 3, hjust = 1) +\n  geom_text(data = ranked |&gt; filter(matchday == max(matchday)), aes(x = matchday +0.3, y=rk, label = squad), size = 3, hjust = 0) +\n  scale_y_reverse() +\n  scale_x_continuous(limits = c(0, 14)) + \n  scale_color_manual(values = c(\"#EF0107\", \"#670E36\", \"#0057B8\", \"#1B458F\", \"#C8102E\", \"#6CABDD\", \"#DA291C\", \"#241F20\", \"#132257\", \"#7A263A\" )) +\n  theme_minimal() +\n  labs(\n    title=\"Tottenham began to rise, but will continue to \\nplummet\", \n    subtitle = \"The early success of Spurs has not maintained due to recent poor form\" ,\n    x=\"Matchday\", \n    y=\"League Position\", \n    caption=\"Source: WorldFootballR | By Max Meyer\"\n  ) + \n  theme(\n    plot.subtitle = element_textbox_simple(),\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\",\n    legend.position = \"none\"\n  )\n\n\n\n\n\nAfter not winning a match in November, Spurs are in a huge time of the season. After a 4-1 loss to Chelsea, an improbable 2-1 loss in added time to Wolverhampton, and a home 2-1 defeat against Aston Villa, Spurs are in need of a bounce back. However, they do play the reigning champions Manchester City this weekend, a match that in the last thirty tries, Tottenham have won ten, drew three, and lost seventeen times.\nWith the hot start that Tottenham had, let us look back on their hot start in comparison to the rest of the Premier League. Most of the league, as show by the charts below, started with rather zero or a positive number of points. Everton, however, were given a punishment of negative points due to financial issues. The average number of points a team has at this point in the season is 17.7.\n\n\nCode\nggplot() +\n  geom_hline(yintercept=17.7, color=\"blue\") + \n  geom_line(data=thisseason, aes(x=matchday, y=pts, group=squad)) + \n  geom_line(data=tot, aes(x=matchday, y=pts, group=squad, color=\"red\")) +\n  facet_wrap(\"~squad\") +\n  theme_minimal() +\n  labs(\n    title=\"After rising above the curve, Spurs stop dead in their \\ntracks\", \n    subtitle = \"Since the hot start, Tottenham has since slowed their pace in the last three matchdays\" ,\n    x=\"Matchday\", \n    y=\"Points\", \n    caption=\"Source: WorldFootballR | By Max Meyer\"\n  ) + \n  theme(\n    plot.subtitle = element_textbox_simple(),\n    plot.title = element_text(size = 17, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\",\n    legend.position = \"none\"\n  )\n\n\n\n\n\nSpurs had one of the hottest starts this season, but since their start they have been passed by clubs like Manchester City, Arsenal, and even Aston Villa. With the amount of success they had early on, Spurs fans thought that this was their time. However, it looks like it will be the same team we see every year.\nThis Spurs teams has scored a decent amount of goals this season with twenty-five, which is only the sixth best in the league. Their defense, however, has left more to be desired. They have allowed seventeen goals this season, which when they allowed only 9 before their most recent three games, their defense seemed to be one of the toughest in the league.\n\n\nCode\nggplot() + \n  geom_bar(data=weekthirteen, aes(x=reorder(squad, g_diff), weight=g_diff), fill=\"grey\") +\n  geom_bar(data=totthirteen, aes(x=reorder(squad, g_diff), weight=g_diff), fill=\"#132257\") +\n  coord_flip() +\n  theme_minimal() + \n  labs(\n    title=\"Spurs will not have the best goal difference\", \n    subtitle = \"Tottenham is above the middle of the pack when it comes to goal difference, but still below the big dogs\",\n    x=\"Goal Differential\", \n    y=\"Premier League Team\", \n    caption=\"Source: WorldFootballIR | By Max Meyer\"\n  ) +\n  theme(\n    plot.subtitle = element_textbox_simple(),\n    plot.title = element_text(size = 24, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nThe best teams in the Premier League are able to have one of the elite goal differences. The more goals you score, the more games you will win. Same goes with goals against. The less goals you allow, the more games you will win. Tottenham started off the season hot, but have slowed down majorly in recent weeks, which will be the reason they do not hoist the trophy at the end of the season.\nHowever, they are still doing better than the team in red in Manchester. Which is all that matters. Manchester is and always will be blue. Come on city. Back-to-back trebles incoming."
  },
  {
    "objectID": "posts/centurions-are-the-best-team-ever/index.html",
    "href": "posts/centurions-are-the-best-team-ever/index.html",
    "title": "Centurions are the best team ever",
    "section": "",
    "text": "There have been seven different winners since the Premier League became official in 1992, formerly referred to as the top tier of English soccer. There have been many different teams of various skill levels to have win the title, such as the Arsenal Invincibles and the underdogs of Leicester City.\nHowever, in the history of English soccer, only one team has been able to reach a total of 100 points in a singular season. Manchester City in the 2017-2018 season, on the final matchday of the season, defeated Bournemouth in the final minutes to become the first and currently only team to score 100 points in a season.\nEven though they are the only team that has achieved this milestone, some do not consider them the best team in league history. Below is a chart of the ten highest total point teams in the history of the Premier League, with the Manchester City Centurions’ team and the Arsenal Invincibles’ team selected.\n\n\nCode\nlibrary(tidyverse)\nlibrary(worldfootballR)\nlibrary(waffle)\nlibrary(ggalt)\nlibrary(ggtext)\n\nseason1718 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2017\", matchday=38) |&gt; \n  mutate(\n  Season = \"2017-2018\"\n)\n\nseason1920 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2019\", matchday=38) |&gt; \n  mutate(\n  Season = \"2019-2020\"\n)\n\nseason1819 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2018\", matchday=38) |&gt; \n  mutate(\n  Season = \"2018-2019\"\n)\n\nseason0405 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2004\", matchday=38) |&gt; \n  mutate(\n  Season = \"2004-2005\"\n)\n\nseason1617 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2016\", matchday=38) |&gt; \n  mutate(\n  Season = \"2016-2017\"\n)\n\nseason9900 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"1999\", matchday=38) |&gt; \n  mutate(\n  Season = \"1999-2000\"\n)\n\nseason0506 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2005\", matchday=38) |&gt; \n  mutate(\n  Season = \"2005-2006\"\n)\n\nseason0304 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2003\", matchday=38) |&gt; \n  mutate(\n  Season = \"2003-2004\"\n)\n\nseason0809 &lt;- tm_matchday_table(country_name=\"England\", start_year=\"2008\", matchday=38) |&gt; \n  mutate(\n  Season = \"2008-2009\"\n)\n\n\ntables &lt;- bind_rows(season1718, season1819, season1920, season9900, season0809, season0304, season0506, season1617, season0405) |&gt; \n  mutate(squadseason = paste(squad, Season))\n\n\nbestever &lt;- tables |&gt;\n  filter(pts &gt; 89) |&gt;\n  arrange(desc(pts))\n\n\nmc &lt;- season1718 |&gt;\n  filter(pts &gt; 99) |&gt;\n  mutate(squadseason = paste(squad, Season))\n\nar &lt;- season0304 |&gt;\n  filter(pts &gt; 89) |&gt;\n  mutate(squadseason = paste(squad, Season))\n\n\nggplot() + \n  geom_bar(data=bestever, aes(x=reorder(squadseason, pts), weight=pts), fill = \"grey\") +\n  geom_bar(data=mc, aes(x=reorder(squadseason, pts), weight=pts), fill = \"#6CABDD\") +\n  geom_bar(data=ar, aes(x=reorder(squadseason, pts), weight=pts), fill = \"#EF0107\") +\n  coord_flip() +\n  theme_minimal() + \n  labs(\n    title=\"Highest Point Teams in Premier League History\", \n    subtitle = \"These are the ten highest total point teams in the history of the Premier League\",\n    x=\"Squad and Season\", \n    y=\"Total Points\", \n    caption=\"Source: WorldFootballIR | By Max Meyer\"\n  ) +\n  theme(\n    plot.subtitle = element_textbox_simple(),\n    plot.title = element_text(size = 22, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nWhen putting the best teams in a table, I found that the Invincibles were only the 10th highest point total team in Premier League history, even though they never lost a match. Manchester team just edges out the 2018-2019 Liverpool squad who almost matched the Centurions, but ended the season with 99 points.\nWhen considering who the best teams ever are, it is important to think of two key factors: how much can they score and how little can their opponents score.\nBelow is a dumbbell chart comparing the goals scored and goals conceded by each of the ten highest point teams in league history, with the bold line showcasing the goal diffence.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=bestever, \n    aes(y=reorder(squadseason, g_diff), x=gf, xend=ga),\n    size = 3,\n    colour = \"black\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  labs(\n    title=\"Goal Difference of Highest Point Teams in \\nPremier League History\", \n    subtitle = \"The &lt;span style = 'color:green;'&gt;goals scored&lt;/span&gt; on the right are good. The &lt;span style = 'color:red;'&gt;goals conceded&lt;/span&gt; on the left are bad.\",\n    x=\"Goal Difference\", \n    y=\"Squad and Season\", \n    caption=\"Source: WorldFootballIR | By Max Meyer\"\n  ) + \n  theme_minimal() + \n  theme(\n    plot.subtitle = element_textbox_simple(),\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nUnsurprisingly, the Centurions have the highest goal difference on this list. Even though they may have not been the best defensive team ever, they knew how to score goals, which helped them in their historic season.\nLet’s focus on the two teams that are regarded as two of the best ever, Arsenal and Manchester City. More specifically, their historic season, the Invincibles and the Centurions. Do you value the goals or the wins? Actually, the Centurions win both categories, where they won six more games, but they did lose twice, and they massively outscored the Gunners.\nIn their season, they scored 106 goals while only allowing 27, which is one more than the Invincibles allowed in their season where they only scored 73 and conceded 26. Below is a waffle chart showcasing the goal difference between these two squads in a visual manner.\n\n\nCode\nmcgd &lt;- c(\"Goals Scored\"=106, \"Goals Conceded\"=27)\nargd &lt;- c(\"Goals Scored\"=73, \"Goals Conceded\"=26, 34)\n\n\niron(\n waffle(\n   mcgd, \n   rows = 7, \n   colors = c(\"#6CABDD\", \"#FFC659\")) + \n   labs(\n     x=\"Manchester City\",\n     title=\"Centurions vs Invincibles Goal Difference\", \n     subtitle=\"Even though Centurions lost multiple games in their route to 100 points, they still outscored \\nthe only unbeaten team in Premier League history.\") + \n   theme(\n    plot.title = element_text(size = 22, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 14),\n    axis.title.y = element_blank()\n  ),\n waffle(\n   argd, \n   rows = 7, \n   colors = c(\"#EF0107\", \"#063672\", \"white\")) + \n   labs(\n     x = \"Arsenal\\n1 square = 1 goal\",\n     caption=\"Source: WorldFootballIR | By Max Meyer\"\n     )\n) \n\n\n\n\n\nAlthough some value the factor of not losing a single match, I value the amount of goals scored and the total victories that the Centurions had over the Invincibles. Even though Manchester City did lose matches, they still are the only team to put up triple digits in the point column in a season and are one only five teams to score 100 goals in a single season, in which they hold the record with 106.\nThe Invincibles are regarded as one of the best teams to ever play the beautiful game, but the Centurions perfected it and showcased that they were the best team in the history of the Premier League."
  },
  {
    "objectID": "posts/using-fouls-and-free-throws-to-create-the-perfect-bracket/index.html",
    "href": "posts/using-fouls-and-free-throws-to-create-the-perfect-bracket/index.html",
    "title": "Using Fouls and Free Throws to Create the Perfect Bracket",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hoopR)\nlibrary(bonsai)\nlibrary(gt)\nlibrary(zoo)\n\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024)\n\nnond1 &lt;- games |&gt; group_by(team_id, season) |&gt; \n  tally() |&gt; \n  filter(n &lt; 10 & season != 2021) |&gt; \n  select(team_id)\nnond1 &lt;- pull(nond1)\n\ndf &lt;- games |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1) |&gt; filter(game_date &lt; as.Date(\"2024-03-18\"))\n\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),  \n    score_margin = team_score - opponent_team_score,\n    total_fouls = technical_fouls + flagrant_fouls + fouls,\n    team_season_total_fouls = lag(cummean(total_fouls), n=1),\n    absolute_score_margin = abs(score_margin),\n    team_free_throws_made = lag(cummean(free_throws_made), n=1)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_season_total_fouls = team_season_total_fouls,\n    opponent_free_throws_made = team_free_throws_made\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_season_total_fouls,\n    opponent_free_throws_made\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_result,\n    team_season_total_fouls,\n    opponent_season_total_fouls,\n    team_free_throws_made,\n    opponent_free_throws_made\n    ) |&gt; \n  na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_train) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors())\n\nsummary(game_recipe)\n\nlightgbm_mod &lt;- \n  boost_tree() |&gt;\n  set_engine(\"lightgbm\") |&gt;\n  set_mode(mode = \"classification\")\n\nlightgbm_workflow &lt;- \n  workflow() |&gt; \n  add_model(lightgbm_mod) |&gt; \n  add_recipe(game_recipe)\n\nlightgbm_fit &lt;- \n  lightgbm_workflow |&gt; \n  fit(data = game_train)\n\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),  \n    score_margin = team_score - opponent_team_score,\n    total_fouls = technical_fouls + flagrant_fouls + fouls,\n    team_season_total_fouls = cummean(total_fouls),\n    absolute_score_margin = abs(score_margin),\n    team_free_throws_made = cummean(free_throws_made)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_season_total_fouls = team_season_total_fouls,\n    opponent_free_throws_made = team_free_throws_made\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    opponent_season_total_fouls,\n    opponent_free_throws_made\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_result,\n    team_season_total_fouls,\n    opponent_season_total_fouls,\n    team_free_throws_made,\n    opponent_free_throws_made\n    ) |&gt; \n  na.omit()\n\nplayingames &lt;- tibble(\n  team_short_display_name =\"Howard\",\n  opponent_team_short_display_name = \"Wagner\"\n) |&gt; add_row(\n  team_short_display_name = \"Boise St\",\n  opponent_team_short_display_name = \"Colorado\"\n) |&gt; add_row(\n  team_short_display_name = \"Montana St\",\n  opponent_team_short_display_name = \"Grambling\"\n) |&gt; add_row(\n  team_short_display_name = \"Colorado St\",\n  opponent_team_short_display_name = \"Virginia\"\n)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(playingames)\n\nplayingames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(playingames) \n\nplayin &lt;- lightgbm_fit |&gt; predict(new_data = playingames) |&gt;\n  bind_cols(playingames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nplayin &lt;- lightgbm_fit |&gt; predict(new_data = playingames, type=\"prob\") |&gt;\n  bind_cols(playin) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\neastround1 &lt;- lightgbm_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 &lt;- lightgbm_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Illinois\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"Iowa State\"\n)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\neastround2 &lt;- lightgbm_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 &lt;- lightgbm_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Drake\"\n)\n\neastround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround3games)\n\neastround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround3games) \n\neastround3 &lt;- lightgbm_fit |&gt; predict(new_data = eastround3games) |&gt;\n  bind_cols(eastround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 &lt;- lightgbm_fit |&gt; predict(new_data = eastround3games, type=\"prob\") |&gt;\n  bind_cols(eastround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"BYU\"\n)\n\neastround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround4games)\n\neastround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround4games) \n\neastround4 &lt;- lightgbm_fit |&gt; predict(new_data = eastround4games) |&gt;\n  bind_cols(eastround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 &lt;- lightgbm_fit |&gt; predict(new_data = eastround4games, type=\"prob\") |&gt;\n  bind_cols(eastround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Howard\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\nwestround1 &lt;- lightgbm_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 &lt;- lightgbm_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"New Mexico\",\n  opponent_team_short_display_name=\"Baylor\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Dayton\"\n)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\nwestround2 &lt;- lightgbm_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 &lt;- lightgbm_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Saint Mary's\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Arizona\"\n)\n\nwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround3games)\n\nwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround3games) \n\nwestround3 &lt;- lightgbm_fit |&gt; predict(new_data = westround3games) |&gt;\n  bind_cols(westround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 &lt;- lightgbm_fit |&gt; predict(new_data = westround3games, type=\"prob\") |&gt;\n  bind_cols(westround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Arizona\"\n)\n\nwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround4games)\n\nwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround4games) \n\nwestround4 &lt;- lightgbm_fit |&gt; predict(new_data = westround4games) |&gt;\n  bind_cols(westround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 &lt;- lightgbm_fit |&gt; predict(new_data = westround4games, type=\"prob\") |&gt;\n  bind_cols(westround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\nsouthround1 &lt;- lightgbm_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 &lt;- lightgbm_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Nebraska\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Duke\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Texas Tech\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Marquette\"\n)\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\nsouthround2 &lt;- lightgbm_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 &lt;- lightgbm_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Houston\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Kentucky\"\n)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround3games)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround3games) \n\nsouthround3 &lt;- lightgbm_fit |&gt; predict(new_data = southround3games) |&gt;\n  bind_cols(southround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 &lt;- lightgbm_fit |&gt; predict(new_data = southround3games, type=\"prob\") |&gt;\n  bind_cols(southround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Colorado\",\n  opponent_team_short_display_name=\"Houston\"\n)\n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround4games)\n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround4games) \n\nsouthround4 &lt;- lightgbm_fit |&gt; predict(new_data = southround4games) |&gt;\n  bind_cols(southround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 &lt;- lightgbm_fit |&gt; predict(new_data = southround4games, type=\"prob\") |&gt;\n  bind_cols(southround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Montana St\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\nmidwestround1 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"Samford\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Creighton\"\n) |&gt; add_row(\n  team_short_display_name=\"Colorado St\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\nmidwestround2 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Tennessee\"\n)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround3games)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround3games) \n\nmidwestround3 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround3games) |&gt;\n  bind_cols(midwestround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround3games, type=\"prob\") |&gt;\n  bind_cols(midwestround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"McNeese\"\n)\n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround4games)\n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround4games) \n\nmidwestround4 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround4games) |&gt;\n  bind_cols(midwestround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 &lt;- lightgbm_fit |&gt; predict(new_data = midwestround4games, type=\"prob\") |&gt;\n  bind_cols(midwestround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nfinalfourgames &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Arizona\"\n)\n\nfinalfourgames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(finalfourgames)\n\nfinalfourgames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(finalfourgames) \n\nfinalfour &lt;- lightgbm_fit |&gt; predict(new_data = finalfourgames) |&gt;\n  bind_cols(finalfourgames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfour &lt;- lightgbm_fit |&gt; predict(new_data = finalfourgames, type=\"prob\") |&gt;\n  bind_cols(finalfour) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nnationalchampionshipgame &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"UConn\"\n)\n\nnationalchampionshipgame &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(nationalchampionshipgame)\n\nnationalchampionshipgame &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(nationalchampionshipgame) \n\nnationalchampionship &lt;- lightgbm_fit |&gt; predict(new_data = nationalchampionshipgame) |&gt;\n  bind_cols(nationalchampionshipgame) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnationalchampionship &lt;- lightgbm_fit |&gt; predict(new_data = nationalchampionshipgame, type=\"prob\") |&gt;\n  bind_cols(nationalchampionship) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nI’ll be honest, the bracket was far from perfect. In fact, it was atrocious. However, I got the national champion correct, so who is the real winner here?\nMany factors go into deciding what will create the perfect bracket. The lowest seeded team to ever win the NCAA Tournament was Villanova. The Wildcats were the 8-seed back in 1985 and went on to win their first of their three national championships.\nTalent on the floor can make a big difference as well. Both of the teams in the national championship this season had players that were both first-team All Americans. Talent can help carry your team to the top.\nWith that being said, I wanted to test my luck with a different approach. Fouls are such a common factor in a game. They happen all the time. What happens as a result of fouls? Free throws. What I decided to do was to take my data and create a NCAA Tournament bracket based on their offensive efficiency and defensive efficiency, but I also added total fouls and free throws made to my data.\nThe reason I did this was to answer a simple question. Do teams that foul more and make their free throws win more? The result? A not-so-perfect bracket.\nLet’s start with the best part of this result. I correctly predicted the national champion UCONN Huskies to repeat as champions, which they ended up doing. That is about the only good part of this entire thing. After UCONN, it went downhill.\n\n\nCode\neasttable &lt;- eastround1 |&gt;  \n  select(team_short_display_name, .pred_class, .pred_W, .pred_L, opponent_team_short_display_name) \n\neasttable |&gt; \n  gt() |&gt;  \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Percentage\",\n    .pred_L = \"Loss Percentage\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt; \n  tab_header(\n    title = \"East Regional: Round of 64\",\n    subtitle = \"UCONN rocks, everyone else does not.\"\n  ) |&gt;   \n  tab_source_note(\n    source_note = md(\"Source: HoopR | By Max Meyer\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt; \n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt; \n opt_row_striping()\n\n\n\n\n\n\n  \n    \n      East Regional: Round of 64\n    \n    \n      UCONN rocks, everyone else does not.\n    \n    \n      Team\n      Prediction\n      Win Percentage\n      Loss Percentage\n      Opponent\n    \n  \n  \n    Illinois\nL\n0.4808605\n0.5191395\nMorehead St\n    Washington St\nL\n0.3519025\n0.6480975\nDrake\n    UConn\nW\n0.8576085\n0.1423915\nStetson\n    Iowa State\nW\n0.6865057\n0.3134943\nS Dakota St\n    FAU\nW\n0.6865402\n0.3134598\nNorthwestern\n    San Diego St\nW\n0.6804798\n0.3195202\nUAB\n    BYU\nW\n0.7409829\n0.2590171\nDuquesne\n    Auburn\nW\n0.7413311\n0.2586689\nYale\n  \n  \n    \n      Source: HoopR | By Max Meyer\n    \n  \n  \n\n\n\n\nUCONN was the clear favorite in their match up which was no surprise. However there were only two other games that my model correctly predicted: Iowa State over South Dakota State and San Diego State over the University of Alabama at Birmingham. The rest of the games, however, my model predicted incorrectly, going 3/8 correct for the East Region.\nAnd it did not get better\n\n\nCode\neast2table &lt;- eastround2 |&gt;  \n  select(team_short_display_name, .pred_class, .pred_W, .pred_L, opponent_team_short_display_name) \n\neast2table |&gt; \n  gt() |&gt;  \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Percentage\",\n    .pred_L = \"Loss Percentage\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt; \n  tab_header(\n    title = \"East Regional: Round of 32\",\n    subtitle = \"UCONN still rocks, everyone else is still bad.\"\n  ) |&gt;   \n  tab_source_note(\n    source_note = md(\"Source: HoopR | By Max Meyer\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt; \n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt; \n opt_row_striping()\n\n\n\n\n\n\n  \n    \n      East Regional: Round of 32\n    \n    \n      UCONN still rocks, everyone else is still bad.\n    \n    \n      Team\n      Prediction\n      Win Percentage\n      Loss Percentage\n      Opponent\n    \n  \n  \n    Drake\nW\n0.5310703\n0.4689297\nIowa State\n    UConn\nW\n0.7020985\n0.2979015\nFAU\n    BYU\nW\n0.6081079\n0.3918921\nIllinois\n    San Diego St\nL\n0.2766344\n0.7233656\nAuburn\n  \n  \n    \n      Source: HoopR | By Max Meyer\n    \n  \n  \n\n\n\n\nOnce again, my model predicted UCONN to move on, but I also had Drake, BYU, and Auburn to make it to the Sweet Sixteen as well. All of them were knocked out in the first round.\nThat was not even the worst part of this bracket. Looking at the Midwest Region, normal people may think that a team like Purdue or Tennessee would come out from this region, which Purdue ended up doing. However, my model predicted the McNeese Cowboys to not only upset Gonzaga in the Round of 64, but it had them making an improbable run to the Final Four.\n\n\nCode\nmidwesttable &lt;- midwestround1 |&gt;  \n  select(team_short_display_name, .pred_class, .pred_W, .pred_L, opponent_team_short_display_name) \n\nmidwesttable |&gt; \n  gt() |&gt;  \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Percentage\",\n    .pred_L = \"Loss Percentage\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt; \n  tab_header(\n    title = \"Midwest Regional: Round of 64\",\n    subtitle = \"How 'bout them Cowboys.\"\n  ) |&gt;   \n  tab_source_note(\n    source_note = md(\"Source: HoopR | By Max Meyer\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt; \n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt; \n opt_row_striping()\n\n\n\n\n\n\n  \n    \n      Midwest Regional: Round of 64\n    \n    \n      How 'bout them Cowboys.\n    \n    \n      Team\n      Prediction\n      Win Percentage\n      Loss Percentage\n      Opponent\n    \n  \n  \n    Kansas\nL\n0.3787495\n0.6212505\nSamford\n    Purdue\nW\n0.8489768\n0.1510232\nMontana St\n    Gonzaga\nL\n0.4942626\n0.5057374\nMcNeese\n    Utah State\nW\n0.5006031\n0.4993969\nTCU\n    Texas\nL\n0.4996831\n0.5003169\nColorado St\n    South Carolina\nW\n0.5552120\n0.4447880\nOregon\n    Tennessee\nW\n0.7148432\n0.2851568\nSaint Peter's\n    Creighton\nW\n0.6368665\n0.3631335\nAkron\n  \n  \n    \n      Source: HoopR | By Max Meyer\n    \n  \n  \n\n\n\n\nThey went on to lose by 21 points to Gonzaga and were eliminated in the first round.\nWhy was my model so high on the Cowboys? There is one pretty easy answer to this solution.\nThey did not play anybody. McNeese went into the tournament with a record of 30-3, on an eleven game win streak heading into the tournament. It was one of the most picked upsets in all the bracket, but who did they play?\nThey went on the road and beat the bottom of the Big Ten conference Michigan, the Mississippi University for Women, and the College of Biblical Studies. This was the team the nation was so high on heading into the tournament. They scored a lot, played with great pace, and did not lose much, but their competition was some of the easiest in the entire country.\nEven though my model was flawed in many forms, I still was able to predict the national champion, but let’s be real, everyone picked UCONN. If you did not, you did not care about your bracket."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Predicting most valuable rookie wide receivers\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 7, 2024\n\n\nMax Meyer\n\n\n\n\n\n\n  \n\n\n\n\nUsing Fouls and Free Throws to Create the Perfect Bracket\n\n\n\n\n\n\n\nmarch\n\n\nbasketball\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2024\n\n\nMax Meyer\n\n\n\n\n\n\n  \n\n\n\n\nWhy Tottenham will not win the Premier League this season\n\n\n\n\n\n\n\nspurs\n\n\nsoccer\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2023\n\n\nMax Meyer\n\n\n\n\n\n\n  \n\n\n\n\nCenturions are the best team ever\n\n\n\n\n\n\n\ncenturions\n\n\nsoccer\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nNov 10, 2023\n\n\nMax Meyer\n\n\n\n\n\n\n  \n\n\n\n\nHello.\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nMax Meyer\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "",
    "text": "Oh the NFL season is fastly approaching and with that comes some new faces to the league. With another season of the NFL comes another season of fantasy football. But who should really be taken off the board first. Obviously there are some notable veterans that should and will be selected early, but who should be the first rookie off the board? Should it be the high-profile Marvin Harrison Jr. or the talented Malik Nabers? That is what we are here to decide.\nLooking at different statistics, I have come to a conclusion on who to draft as the first rookie of the board. Using a combination of yards per reception in college, current NFL quarterback talent as well as their ability to throw interceptions, the stats do not lie. I have cumulated quarterback completion percentage and their interception total from the past season and the receivers’ college stats to determine who will be the most commonly selected receiver in fantasy drafts.\nCode\nlibrary(tidyverse)\nlibrary(cfbfastR)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\n\nset.seed(1234)\n\nwrpicks &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrpicks1423.csv\") |&gt; \n  mutate(college_year = year - 1)\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/receiving1323.csv\")\nwrusage &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/usage1323.csv\")\nwrfantasy &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/fantasystats1423.csv\") |&gt; \n  mutate(nfl_team = case_when(\n    tm == \"ARI\" ~ \"Arizona Cardinals\",\n    tm == \"ATL\" ~ \"Atlanta Falcons\",\n    tm == \"BAL\" ~ \"Baltimore Ravens\",\n    tm == \"BUF\" ~ \"Buffalo Bills\",\n    tm == \"CAR\" ~ \"Carolina Panthers\",\n    tm == \"CHI\" ~ \"Chicago Bears\",\n    tm == \"CIN\" ~ \"Cincinnati Bengals\",\n    tm == \"CLE\" ~ \"Cleveland Browns\",\n    tm == \"DAL\" ~ \"Dallas Cowboys\",\n    tm == \"DEN\" ~ \"Denver Broncos\",\n    tm == \"DET\" ~ \"Detroit Lions\",\n    tm == \"GNB\" ~ \"Green Bay Packers\",\n    tm == \"HOU\" ~ \"Houston Texans\",\n    tm == \"IND\" ~ \"Indianapolis Colts\",\n    tm == \"JAX\" ~ \"Jacksonville Jaguars\",\n    tm == \"KAN\" ~ \"Kansas City Chiefs\",\n    tm == \"LAC\" ~ \"Los Angeles Chargers\", \n    tm == \"LAR\" ~ \"Los Angeles Rams\", \n    tm == \"LVR\" ~ \"Las Vegas Raiders\",\n    tm == \"MIA\" ~ \"Miami Dolphins\",  \n    tm == \"MIN\" ~ \"Minnesota Vikings\",\n    tm == \"NOR\" ~ \"New Orleans Saints\",\n    tm == \"NWE\" ~ \"New England Patriots\",\n    tm == \"NYG\" ~ \"New York Giants\",\n    tm == \"NYJ\" ~ \"New York Jets\",\n    tm == \"OAK\" ~ \"Las Vegas Raiders\",\n    tm == \"PHI\" ~ \"Philadelphia Eagles\",\n    tm == \"PIT\" ~ \"Pittsburgh Steelers\",\n    tm == \"SDG\" ~ \"Los Angeles Chargers\",\n    tm == \"SEA\" ~ \"Seattle Seahawks\",\n    tm == \"SFO\" ~ \"San Francisco 49ers\",\n    tm == \"STL\" ~ \"Los Angeles Rams\",\n    tm == \"TAM\" ~ \"Tampa Bay Buccaneers\",\n    tm == \"TEN\" ~ \"Tennessee Titans\",\n    tm == \"WAS\" ~ \"Washington Commanders\",\n  ))\n\nnflstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/nfl_passing_offense0023.csv\") |&gt; filter(season &gt;= 2009) |&gt; \n  mutate(\n    nfl_team = case_when(\n      tm == \"Oakland Raiders\" ~ \"Las Vegas Raiders\",\n      tm == \"San Diego Chargers\" ~ \"Los Angeles Chargers\",\n      tm == \"St. Louis Rams\" ~ \"Los Angeles Rams\",\n      tm == \"Washington Football Team\" ~ \"Washington Commanders\",\n      tm == \"Washington Redskins\" ~ \"Washington Commanders\",\n      TRUE ~ tm\n      ))\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade,\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_rec,\n    receiving_ypr\n  )\n\nwrfantasyselected &lt;- wrfantasy |&gt; \n  filter(fant_pos == \"WR\") |&gt; \n  select(\n    season,\n    player, \n    nfl_team,\n    fant_pos,\n    fant_pt\n  )\n\nnflpassingselected &lt;- nflstats |&gt; \n  mutate(\n    rolling_mean_passing_yards = rollmean(yds, k=2, align = \"right\", fill=NA),\n    rolling_mean_passing_tds = rollmean(td, k=2, align = \"right\", fill=NA),\n  ) |&gt; \n  filter(season &gt;= 2014) |&gt; \n  select(\n    season,\n    nfl_team,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    int,\n    cmp_percent\n  )\n  \nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrpicksandfantasy &lt;- wrfantasyselected |&gt; \n  inner_join(wrpicksstats, by=c(\"player\" = \"name\", \"season\"=\"year\")) \n\nwrmodeling &lt;- wrpicksandfantasy |&gt;\n  left_join(nflpassingselected, by=c(\"season\"=\"season\", \"nfl_team.x\"=\"nfl_team\")) |&gt; \n  na.omit() |&gt; \n  select(-nfl_team.y)\n\nwrmodelingselected &lt;- wrmodeling |&gt; \n  select(\n    season,\n    player,\n    nfl_team.x,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    fant_pt,\n    receiving_rec,\n    receiving_ypr,\n    int,\n    cmp_percent\n  ) |&gt; \n  rename(\n    nfl_team = nfl_team.x\n  )\n\nplayer_split &lt;- initial_split(wrmodelingselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;- \n  recipe(fant_pt ~ ., data = player_train) |&gt; \n  update_role(player, season, nfl_team, new_role = \"ID\")\n\nlinear_mod &lt;- \n  linear_reg() |&gt; \n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\nlinear_workflow &lt;- \n  workflow() %&gt;% \n  add_model(linear_mod) %&gt;% \n  add_recipe(player_recipe)\n\nlinear_fit &lt;- \n  linear_workflow %&gt;% \n  fit(data = player_train)\n\n# Start the prediction for this season. The NFL team names are a mess because of choices made by the picks data provider. They just list them by city name, which creates problems in Los Angeles and New York. \n\nwrpicks &lt;- cfbd_draft_picks(year = 2024) |&gt; \n  filter(position == \"Wide Receiver\") |&gt; \n  mutate(college_year = year - 1) |&gt; \n  mutate(college_athlete_id = as.character(college_athlete_id)) |&gt; \n  mutate(nfl_team = case_when(\n    nfl_team == \"Arizona\" ~ \"Arizona Cardinals\",\n    nfl_team == \"Atlanta\" ~ \"Atlanta Falcons\",\n    nfl_team == \"Baltimore\" ~ \"Baltimore Ravens\",\n    nfl_team == \"Buffalo\" ~ \"Buffalo Bills\",\n    nfl_team == \"Carolina\" ~ \"Carolina Panthers\",\n    nfl_team == \"Chicago\" ~ \"Chicago Bears\",\n    nfl_team == \"Cincinnati\" ~ \"Cincinnati Bengals\",\n    nfl_team == \"Cleveland\" ~ \"Cleveland Browns\",\n    nfl_team == \"Dallas\" ~ \"Dallas Cowboys\",\n    nfl_team == \"Denver\" ~ \"Denver Broncos\",\n    nfl_team == \"Detroit\" ~ \"Detroit Lions\",\n    nfl_team == \"Green Bay\" ~ \"Green Bay Packers\",\n    nfl_team == \"Houston\" ~ \"Houston Texans\",\n    nfl_team == \"Indianapolis\" ~ \"Indianapolis Colts\",\n    nfl_team == \"Jacksonville\" ~ \"Jacksonville Jaguars\",\n    nfl_team == \"Kansas City\" ~ \"Kansas City Chiefs\",\n    name == \"Ladd McConkey\" ~ \"Los Angeles Chargers\", \n    name == \"Brenden Rice\" ~ \"Los Angeles Chargers\", \n    name == \"Cornelius Johnson\" ~ \"Los Angeles Chargers\",\n    name == \"Jordan Whittington\" ~ \"Los Angeles Rams\", \n    nfl_team == \"Las Vegas\" ~ \"Las Vegas Raiders\",\n    nfl_team == \"Miami\" ~ \"Miami Dolphins\",  \n    nfl_team == \"Minnesota\" ~ \"Minnesota Vikings\",\n    nfl_team == \"New Orleans\" ~ \"New Orleans Saints\",\n    nfl_team == \"New England\" ~ \"New England Patriots\",\n    name == \"Malik Nabers\" ~ \"New York Giants\",\n    nfl_team == \"New York\" ~ \"New York Jets\",\n    nfl_team == \"Philadelphia\" ~ \"Philadelphia Eagles\",\n    nfl_team == \"Pittsburgh\" ~ \"Pittsburgh Steelers\",\n    nfl_team == \"Seattle\" ~ \"Seattle Seahawks\",\n    nfl_team == \"San Francisco\" ~ \"San Francisco 49ers\",\n    nfl_team == \"St Louis\" ~ \"Los Angeles Rams\",\n    nfl_team == \"Tampa Bay\" ~ \"Tampa Bay Buccaneers\",\n    nfl_team == \"Tennessee\" ~ \"Tennessee Titans\",\n    nfl_team == \"Washington\" ~ \"Washington Commanders\",\n  ))\n\nwrstats &lt;- cfbd_stats_season_player(2023, category = \"receiving\") |&gt; \n  mutate(season = 2023)\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_rec,\n    receiving_ypr\n  )\n\nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrmodeling &lt;- wrpicksstats |&gt;\n  left_join(nflpassingselected, by=c(\"college_year\"=\"season\", \"nfl_team\"=\"nfl_team\")) |&gt;\n  select(\n    year,\n    name,\n    nfl_team,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    receiving_rec,\n    receiving_ypr,\n    int,\n    cmp_percent\n  ) |&gt; \n  rename(\n    player = name,\n    season = year\n  )\n\nlinearpredict &lt;- \n  linear_fit %&gt;% \n  predict(new_data = wrmodeling) %&gt;%\n  bind_cols(wrmodeling) \n\n# now that we have predictions, make the table\n\nlinearpredict |&gt; \n  select(player, nfl_team, overall, .pred) |&gt; \n  top_n(10, wt=.pred) |&gt; \n  arrange(desc(.pred)) |&gt; \n  gt() |&gt; \n  cols_label(\n    player = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Predicted fantasy points\"\n  )  |&gt;\n  tab_header(\n    title = \"Predicting the top fantasy rookie wide receivers\",\n    subtitle = \"Using quarterback statistics, draft history, and collegiate statistics, this chart showcases a prediction of who will be the top ten rookie fantasy scorers in the NFL this season.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Max Meyer |  **Source:** CFDB, Pro-Football Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predicting the top fantasy rookie wide receivers\n    \n    \n      Using quarterback statistics, draft history, and collegiate statistics, this chart showcases a prediction of who will be the top ten rookie fantasy scorers in the NFL this season.\n    \n    \n      Player\n      Team\n      Pick\n      Predicted fantasy points\n    \n  \n  \n    Xavier Worthy\nKansas City Chiefs\n28\n85.99895\n    Keon Coleman\nBuffalo Bills\n33\n84.34503\n    Ricky Pearsall\nSan Francisco 49ers\n31\n81.13382\n    Malik Nabers\nNew York Giants\n6\n80.56921\n    Brian Thomas Jr.\nJacksonville Jaguars\n23\n79.02903\n    Rome Odunze\nChicago Bears\n9\n77.31940\n    Marvin Harrison Jr.\nArizona Cardinals\n4\n77.24811\n    Ja'Lynn Polk\nNew England Patriots\n37\n75.48040\n    Ladd McConkey\nLos Angeles Chargers\n34\n65.06423\n    Luke McCaffrey\nWashington Commanders\n100\n61.52532\n  \n  \n    \n      By: Max Meyer |  Source: CFDB, Pro-Football Reference"
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "1. Xavier Worthy, Kansas City Chiefs, Drafted #28",
    "text": "1. Xavier Worthy, Kansas City Chiefs, Drafted #28\nThe Texas grad comes out at the top of the list and it is pretty clear why. In his senior year, Worthy tallied over 1,000 receiving yards with five touchdowns and just got drafted to the back-to-back Super Bowl champion Kansas City Chiefs. With Patrick Mahomes throwing the ball to the man with the fastest 40-time in NFL Combine history, he is destined for greatness."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "2. Keon Coleman, Buffalo Bills, Drafted #33",
    "text": "2. Keon Coleman, Buffalo Bills, Drafted #33\nColeman comes in at the second spot after an undefeated regular season with the Florida State Seminoles. Coleman is prime for a big year as a rookie, being one of the primary options for Josh Allen after the departure of Stefon Diggs in the offseason."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "3. Ricky Pearsall, San Francisco 49ers, Drafted #31",
    "text": "3. Ricky Pearsall, San Francisco 49ers, Drafted #31\nThe former Florida Gator falls into the 3rd spot after being drafted by San Francisco. Pearsall is coming off of a good senior season with Florida and will being getting passed to by the MVP runner-up from a season ago, Brock Purdy. Personally, I would not be taking the risk, knowing that San Francisco still has Brandon Aiyuk and Deebo Samuel at the moment."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "4. Malik Nabers, New York Giants, Drafted #6",
    "text": "4. Malik Nabers, New York Giants, Drafted #6\nOne of the two shockers of this test, Malik Nabers falls to the 4 spot. Nabers, a standout at Louisiana State University, will have to deal with having one of the biggest question marks in the NFL, getting the ball thrown to by Daniel Jones."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "5. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23",
    "text": "5. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23\nRight after Nabers falls his LSU counterpart, Brian Thomas Jr. After nearly a 1,200 receiving yard season, Thomas Jr. gets the five spot. Thomas Jr. will also be getting passes from Trevor Lawrence, a player that Malik Nabers wishes he could play with."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "6. Rome Odunze, Chicago Bears, Drafted #9",
    "text": "6. Rome Odunze, Chicago Bears, Drafted #9\nAt number six falls Rome Odunze. Odunze, a star at Washington this past season, is another big question mark this season, not knowing how well Caleb Williams will be able to play elite level football in the NFL in his rookie season just like Odunze."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "7. Marvin Harrison Jr., Arizona Cardinals, Drafted #4",
    "text": "7. Marvin Harrison Jr., Arizona Cardinals, Drafted #4\nThe shocker of the list has to go to “Maserati” Marvin Harrison Jr. The top wide receiver taken in the NFL Draft falls down the list to seven. Harrison Jr. has an “elite” quarterback with Kyler Murray in Arizona, however how will he playing coming off a season riddled with injury?"
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#jalynn-polk-new-england-patriots-drafted-37",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#jalynn-polk-new-england-patriots-drafted-37",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "8. Ja’Lynn Polk, New England Patriots, Drafted #37",
    "text": "8. Ja’Lynn Polk, New England Patriots, Drafted #37\nPolk, the second Washington Husky on the list, falls at eight. Polk will be another question mark, depending on the quarterback play of fellow rookie Drake Maye. Polk was used as the second option behind Rome Odunze at Washington."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "9. Ladd McConkey, Los Angeles Chargers, Drafted #34",
    "text": "9. Ladd McConkey, Los Angeles Chargers, Drafted #34\nThe only national champion on the list falls at nine. McConkey is a two-time champion with the Georgia Bulldogs. McConkey will be a main option for Justin Herbert, who is widely considered a top ten quarterback in the NFL."
  },
  {
    "objectID": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#luke-mccaffrey-washington-commanders-drafted-100",
    "href": "posts/predicting-most-valuable-rookie-wide-receivers/index.html#luke-mccaffrey-washington-commanders-drafted-100",
    "title": "Predicting most valuable rookie wide receivers",
    "section": "10. Luke McCaffrey, Washington Commanders, Drafted #100",
    "text": "10. Luke McCaffrey, Washington Commanders, Drafted #100\nAt the bottom of our list falls our dear Luke McCaffrey. The former Nebraska and Rice wide receiver will be getting passes from the most recet Heisman Trophy winner Jayden Daniels in Washington. McCaffrey can be utilized as a receiver but can be a trick play option as well with his throwing ability."
  }
]